<?php
namespace Tests\Feature;

use App\Models\Client;
use App\Models\Invoice;
use App\Models\Order;
use App\Models\Shop;
use App\Models\User;
use App\Models\Warehouse;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AgentCanCreateOrderTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_agent_can_create_order()
    {
//        $this->createModels();
        $user = User::factory()->create();
        Client::factory()->create();
        Shop::factory()->create();
        Warehouse::factory()->create();
        $order = Order::factory()->create();
        $this->assertEquals($user->id, $order->agent_id);
    }

    public function test_orders_can_be_huge()
    {
        $user = User::factory()->create();

        Client::factory()->create();
        Shop::factory()->create();
        Warehouse::factory()->create();
        $order = Order::factory()->create();

        // test mean time for each order creation, should be no more than .5 of a second
        $this->assertEquals($user->id, $order->agent_id);
    }

    public function test_order_cannot_be_added_if_invoice_is_due()
    {
        $user = User::factory()->create();
        Client::factory()->create();
        Shop::factory()->create();
        Warehouse::factory()->create();
        $invoice = Invoice::factory()->create();
        $invoice->created_at = Carbon::createFromDate('2020', '11', '31');
        $invoice->save();
        Order::factory()->create();

        $this->assertDatabaseCount('orders', 1);
        $this->assertDatabaseMissing('invoices', $invoice->toArray());


    }
}
